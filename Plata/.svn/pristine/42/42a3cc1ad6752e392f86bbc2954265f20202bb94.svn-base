PRIVATE pcPWIFC, pcMYFC AS String
LOCAL llATUALIZAR AS Logical
STORE .F. TO llATUALIZAR

* LOCAL FÍSICO DOS ARQUIVOS "FOXCODE"
pcPWIFC = 'P:\UPDATEVF\FOXCODE.DBF'
pcMYFC	= HOME()+'MYFOXCODE.DBF'

SET PROCEDURE TO 'P:\UPDATEVF\UPDATE_PLATA.FXP'

* ABRINDO PWI-FOXCODE
IF FILE(pcPWIFC)
	USE (pcPWIFC) IN 0 ALIAS FOXCODE
	SELECT * FROM FOXCODE INTO CURSOR TMPPWIFCODE READWRITE 
	USE IN FOXCODE
ELSE
	IF FILE(pcMYFC)
		_FOXCODE = pcMYFC
	ENDIF
	RETURN(.F.)
ENDIF

* ABRINDO MY-FOXCODE
IF FILE(pcMYFC)
	* SETANDO MY-FOXCODE
	USE (pcMYFC) IN 0 ALIAS MYFCODE
	SELECT * FROM MYFCODE INTO CURSOR TMPMYFCODE READWRITE
	USE IN MYFCODE
ELSE
	SELECT * FROM TMPPWIFCODE WHERE 1=2 INTO CURSOR TMPMYFCODE READWRITE
ENDIF

* ATUALIZA VERSÃO DO MY-FOXCODE QUANDO ESTÁ DESATUALIZADO
IF COMPARA_VERSAO()
	IF MESSAGEBOX('Existe uma nova versão para o FOXCODE, deseja atualizar?',4+32,'Atualizar FOXCODE') = 6
		=ATUALIZAR_VERSAO()
		_FOXCODE = pcMYFC
	ENDIF
ELSE
	IF FILE(pcMYFC)
		_FOXCODE = pcMYFC
	ENDIF
ENDIF

SET PROCEDURE TO

IF USED('TMPMYFCODE')
	USE IN TMPMYFCODE
ENDIF

IF USED('TMPPWIFCODE')
	USE IN TMPPWIFCODE
ENDIF

IF USED('TMPFCODE')
	USE IN TMPFCODE
ENDIF

PROC COMPARA_VERSAO
*******************
* COMPARA VERSÃO DO FOXCODE DA MÁQUINA LOCAL COM O DA REDE
* PARA VERIFICAR SE EXISTE ATUALIZAÇÕES
* RETORNA .T. (CASO SEJA NECESSÁRIO ATUALIZAR)
	LOCAL lcPWIFCVERSION, lcMYFCVERSION AS String
	LOCAL llRETORNO AS Logical
	STORE .F. TO llRETORNO
	
	SELE TMPPWIFCODE
	GO TOP
	LOCATE FOR ALLTRIM(ABBREV) == 'PWIFOXCODE'
	IF FOUND()
		lcPWIFCVERSION = ALLTRIM(EXPANDED)
	ELSE
		RETURN(.F.)
	ENDIF

	SELE TMPMYFCODE
	GO TOP
	LOCATE FOR ALLTRIM(ABBREV) == 'PWIFOXCODE'
	IF FOUND()
		* COMPARA VERSÃO DA PWI X MY
		IF NOT lcPWIFCVERSION == ALLTRIM(EXPANDED)
			llRETORNO = .T.
		ENDIF
	ELSE
		* NÃO ENCONTROU VERSÃO ENTÃO É NECESSÁRIO ATUALIZAR
		llRETORNO = .T.
	ENDIF
	
	RETURN(llRETORNO)
ENDPROC

PROC ATUALIZAR_VERSAO
*********************
* ATUALIZA VERSÃO DO PWI-FOXCODE COM O MY-FOXCODE
	LOCAL loREG AS Object

	* CARREGA FOX-CODE LOCAL
	USE (_FOXCODE) IN 0 ALIAS FOXCODE
	SELECT * FROM FOXCODE INTO CURSOR TMPFCODE READWRITE
	USE IN FOXCODE
	
	* ATUALIZA MY-FOXCODE COM DADOS DO (_FOXCODE) + PWI-FOXCODE (MESCLANDO DADOS)
	SELE TMPPWIFCODE
	GO TOP
	SCAN WHILE NOT EOF()
		SELE TMPFCODE
		GO TOP
		LOCATE FOR ALLTRIM(TMPFCODE.ABBREV) == ALLTRIM(TMPPWIFCODE.ABBREV)
		IF FOUND()
			SELE TMPPWIFCODE
			SCATTER NAME loREG MEMO
			
			SELE TMPFCODE
			GATHER NAME loREG MEMO
		ELSE
			SELE TMPPWIFCODE
			SCATTER NAME loREG MEMO
			
			SELE TMPFCODE
			APPEND BLANK
			GATHER NAME loREG MEMO
		ENDIF
	ENDSCAN

	* GRAVANDO REGISTRO DE CONFIGURAÇÃO DO FOXCODE
	SELE TMPFCODE
	GO TOP
	LOCATE FOR TYPE == 'V' AND ABBREV == '' AND EXPANDED == '5'
	IF NOT FOUND()
		SELE TMPFCODE
		APPEND BLANK
		REPLACE TYPE 		WITH 'V',;
				ABBREV 		WITH '',;
				EXPANDED 	WITH '5',;
				SOURCE 		WITH 'RESERVED',;
				USER 		WITH CHR(13)+'top = 10'+CHR(13)+'left = 10'
	ENDIF
	
	SELE TMPFCODE
	GO TOP

	IF FILE(pcMYFC)
		TRY 
			DELETE FILE (pcMYFC)
		CATCH
		ENDTRY
	ENDIF	

	TRY
		COPY TO (pcMYFC)
	CATCH
		MESSAGEBOX('Não foi possível copiar o FoxCode, certifique-se que somente essa instância do Fox está aberta',0,'AVISO!')
	ENDTRY
ENDPROC